{
  "title": "模拟卷B",
  "category": "Dev2-自由部落侠",
  "questions": [
    {
      "describe": "A developer is creating a Lightning web component to display a calendar. The component will be used in multiple countries. In some locales, the first day of the week is a Monday, or a Saturday, or a Sunday.\nWhat should the developer do to ensure the calendar displays accurately for users in every locale?",
      "answerOptions": [
        {
          "describe": "Use a custom metadata type to store key/value pairs.",
          "isRight": false
        },
        {
          "describe": "Query the FirstDayofweek field from the Locale for the current user.",
          "isRight": false
        },
        {
          "describe": "Use UerInfo.getLocale() in the component.",
          "isRight": true
        },
        {
          "describe": "Import the firstDayofweek property in the component.",
          "isRight": false
        }
      ],
      "hashCode": "2019146541",
      "analysis": ""
    },
    {
      "describe": "A developer used custom settings to store some configuration data that changes occasionally. However, tests are now failing in some of the sandboxes that were recently refreshed.\nWhat should be done to eliminate this issue going forward?",
      "answerOptions": [
        {
          "describe": "Set the setting type on the custom setting to Hierarchy.",
          "isRight": false
        },
        {
          "describe": "Set the setting type on the custom setting to List.",
          "isRight": false
        },
        {
          "describe": "Replace custom settings with static resources.",
          "isRight": false
        },
        {
          "describe": "Replace custom settings with custom metadata.",
          "isRight": true
        }
      ],
      "hashCode": "2019146604",
      "analysis": ""
    },
    {
      "describe": "UC wants to develop a customer community to help their customers log issues with their containers. The community needs to function for their German- and Spanish-speaking customers also. UC heard that it's easy to create an international community using Salesforce, and hired a developer to build out the site.\n\nWhat should the developer use to ensure the site is multilingual?",
      "answerOptions": [
        {
          "describe": "Use Custom Metadata to translate custom picklist values.",
          "isRight": false
        },
        {
          "describe": "Use Custom Objects to translate custom picklist values.",
          "isRight": false
        },
        {
          "describe": "Use Custom Settings to ensure custom messages are translated properly. ",
          "isRight": false
        },
        {
          "describe": "Use Custom Labels to ensure custom messages are translated properly.",
          "isRight": true
        }
      ],
      "hashCode": "2019145642",
      "analysis": ""
    },
    {
      "describe": "A developer needs to store variables to control the style and behavior of a Lightning Web Component.\nWhich feature should be used to ensure that the variables are testable in both Production and all Sandboxes?",
      "answerOptions": [
        {
          "describe": "Custom variable",
          "isRight": false
        },
        {
          "describe": "Custom object",
          "isRight": false
        },
        {
          "describe": "Custom metadata",
          "isRight": true
        },
        {
          "describe": "Custom setting",
          "isRight": false
        }
      ],
      "hashCode": "2019146601",
      "analysis": ""
    },
    {
      "describe": "For compliance purposes, a company is required to track long-term product usage in their org. The information that they need to log will be collected from more than one object and, over time, they predict they will have hundreds of millions of records.\n\nWhat should a developer use to implement this?",
      "answerOptions": [
        {
          "describe": "Big Objects",
          "isRight": true
        },
        {
          "describe": "Field History Tracking",
          "isRight": false
        },
        {
          "describe": "Setup Audit Trail",
          "isRight": false
        },
        {
          "describe": "Field Audit Trail",
          "isRight": false
        }
      ],
      "hashCode": "2019145616",
      "analysis": "https://developer.salesforce.com/docs/atlas.en-us.bigobjects.meta/bigobjects/big_object.htm"
    },
    {
      "describe": "UC has enabled the translation workbench and has translated picklist values. UC has a custom multi-select picklist field, Products__c. on the Account object that allows sales reps to specify which of UC's products an Account already has. A developer is tasked with writing an Apex method that retrieves Account records, including the Products__c field.\nWhat should the developer do to ensure the value of Products__c is in the current user's language?",
      "answerOptions": [
        {
          "describe": "Set the locale on each record in the SOQL result list.",
          "isRight": false
        },
        {
          "describe": "Use the locale clause in the SOQL query.",
          "isRight": false
        },
        {
          "describe": "Use toLabel(Products__c) in the fields list of the SOQL query.",
          "isRight": true
        },
        {
          "describe": "Call the translate() method on each record in the SOQL result list.",
          "isRight": false
        }
      ],
      "hashCode": "2019147345",
      "analysis": ""
    },
    {
      "describe": "An Apex Trigger creates a Contract record every time an Opportunity record is marked as Closed and Won. This trigger is working great, except (due to a recent acquisition) historical Opportunity records need to be loaded into the Salesforce instance.\n\nWhen a test batch of records are loaded, the Apex Trigger creates Contract records. A developer is tasked with preventing Contract records from being created when mass loading the Opportunities, but the daily users still need to have the Contract records created.\n\nWhat is the most extendable way to update the Apex Trigger to accomplish this?",
      "answerOptions": [
        {
          "describe": "Add the Profile Id of the user who does the data loading to the Trigger so the Trigger won't fire for this user. ",
          "isRight": false
        },
        {
          "describe": "Use a List Custom Setting to disable the Trigger for the user who does the data loading.",
          "isRight": false
        },
        {
          "describe": "Use a Hierarchy Custom Setting to disable the Trigger for the user who does the data loading.",
          "isRight": true
        },
        {
          "describe": "Add a Validation Rule to the Contract to prevent Contract creation by the user who does the data loading.",
          "isRight": false
        }
      ],
      "hashCode": "2019145615",
      "analysis": ""
    },
    {
      "describe": "Universal Containers decided to use Salesforce to manage a new hire interview process. A custom object called Candidate was created with organization-wide defaults set to Private A lookup on the Candidate object sets an employee as an Interviewer.\nWhat should be used to automatically give Read access to the record when the lookup field is set to the Interviewer user?",
      "answerOptions": [
        {
          "describe": "The record can be shared using a sharing rule.",
          "isRight": false
        },
        {
          "describe": "The record can be shared using a permission set.",
          "isRight": false
        },
        {
          "describe": "The record cannot be shared with the current setup.",
          "isRight": false
        },
        {
          "describe": "The record can be shared using an Apex class.",
          "isRight": true
        }
      ],
      "hashCode": "2019146476",
      "analysis": ""
    },
    {
      "describe": "UC wants to use a Cutomer Community with Customer Community Plus licenses so their customers can track how many containers they are renting and when they are due back. Many of their customers are global companies with complex Account hierarchies, representing various departments within the same organization. One of the requirements is that certain community users within the same Account hierarchy be able to see several departments' containers, based on a junction object that relates the Contact to the  various Account records that represent the departments.\n\nWhich solution solves these requirements?",
      "answerOptions": [
        {
          "describe": "A Custom Report Type and a report Lightning Component on the Community Home Page",
          "isRight": false
        },
        {
          "describe": "A Visualforce page that uses a Custom Controller that specifies without sharing to expose the records",
          "isRight": false
        },
        {
          "describe": "A Custom List View on the junction object with filters that will show the proper records based on owner",
          "isRight": false
        },
        {
          "describe": "An Apex Trigger that Creates Apex Managed Sharing records based on the junction object's relatonships",
          "isRight": true
        }
      ],
      "hashCode": "2019146390",
      "analysis": ""
    },
    {
      "describe": "A company represents their customers as Accounts that have an External ID field called Customer_Number__c. They have a custom object, Order__c, with a Lookup to Account to represent Orders that are placed in their external order management system(OMS).\nWhen an order is fulfilled in the OMS, a REST call to Salesforce should be made that creates an Order record in Salesforce and relates it to the proper Account.\nWhat is the optimal way to implement this?",
      "answerOptions": [
        {
          "describe": "Perform a REST PATCH to upsert the Order__c and specify the Account's Customer_Number__c in it.",
          "isRight": true
        },
        {
          "describe": "Perform a REST GET on the Account and a REST POST to update the Order__c with the Account's record ID.",
          "isRight": false
        },
        {
          "describe": "Perform a REST POST to update the Order__c and specify the Account's Customer_Number__c in it.",
          "isRight": false
        },
        {
          "describe": "Perform a REST GET on the Account and a REST PATCH to upsert the Order__c with the Account's record ID.",
          "isRight": false
        }
      ],
      "hashCode": "2019147343",
      "analysis": "https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_upsert.htm\nIf you have an object that references another object using a relationship, you can use REST API to both insert or update a record and reference another object using an external ID."
    },
    {
      "describe": "An org has a requirement that an Account must always have one and only one Contact listed as Primary. So selecting one Contact will de-select any others. The client wants a checkbox on the Contact called 'Is Primary' to control this feature. The client also wants to ensure that the last name of every Contact is stored entirely in uppercase characters.\n\n What is the optimal way to implement these requirements?",
      "answerOptions": [
        {
          "describe": "Write an after update trigger on Contact for the Is Prlmary logic and a separate before update trigger on Contact for the last name logic.",
          "isRight": false
        },
        {
          "describe": "Write an after update trigger on Account for the Is Primary logic and a before update trigger on Contact for the last name logic.",
          "isRight": false
        },
        {
          "describe": "Write a Validation Rule on the Contact for the Is Primary logic and a before update trigger on Contact for the last name logic.",
          "isRight": false
        },
        {
          "describe": "Write a single trigger on Contact for both after update and before update and callout to helper classes to handle each set of logic.",
          "isRight": true
        }
      ],
      "hashCode": "2019145607",
      "analysis": ""
    },
    {
      "describe": "As part of a custom development, a developer creates a Lightning component to show how a particular opportunity progresses over time. The component must display the date stamp when any of the following fields change:\n    Amount, Probability, Stage, or Close Date\nHow should the developer access the data that must be displayed?",
      "answerOptions": [
        {
          "describe": "Create a custom date field on Opportunity for each field to track the previous date and execute a SOQL query for date fields.",
          "isRight": false
        },
        {
          "describe": "Execute a SOQL query for Amount, Probability, Stage, and Close Date on the OpportunityHistory object.",
          "isRight": true
        },
        {
          "describe": "Subscribe to the OpportunityHistory Change Data Capture event in the Lightning component.",
          "isRight": false
        },
        {
          "describe": "Subscribe to the Opportunity Change Data Capture event in the Lightning component.",
          "isRight": false
        }
      ],
      "hashCode": "2019146574",
      "analysis": ""
    },
    {
      "describe": "UC stores user preferences in a Hierarchy Custom Setting, User_Prefs__c, with a Checkbox field, Show_Help__c. Company-level defaults are stored at the organizational level, but may be overridden at the user level. If a user has not overridden preferences, then the defaults should be used.\n\nHow should the Show_Help__c preference be retrieved for the current user?",
      "answerOptions": [
        {
          "describe": "Boolean show = User_Prefs__c.Show_Help__c;",
          "isRight": false
        },
        {
          "describe": "Boolean show = User_Prefs__c.getValues(UserInfo.getUserId( )).Show_Help__c;",
          "isRight": false
        },
        {
          "describe": "Boolean show = User_Prefs__c.getInstance( ).Show_Help__c;",
          "isRight": true
        },
        {
          "describe": "Boolean show = User_Prefs__c.getValues( ).Show_Help__c;",
          "isRight": false
        }
      ],
      "hashCode": "2019146422",
      "analysis": ""
    },
    {
      "describe": "UC uses Salesforce to manage its product offerings to customers.\nA developer is building a custom mobile app that must allow app users to view product information, in real time, that is stored in Salesforce.\nWhat should the developer use to get the product information from Salesforce?",
      "answerOptions": [
        {
          "describe": "SOAP API",
          "isRight": false
        },
        {
          "describe": "User Interface API",
          "isRight": false
        },
        {
          "describe": "Streaming API",
          "isRight": false
        },
        {
          "describe": "REST API",
          "isRight": true
        }
      ],
      "hashCode": "2019147319",
      "analysis": ""
    },
    {
      "describe": "Business rules require a Contact to always be create when a new Account is created.\nWhat can be used when developing a custom screen to ensure an Account is not created if the creation of the Contact fails?",
      "answerOptions": [
        {
          "describe": "Use setSavePoint( ) and rollback( ) with a try/catch block.",
          "isRight": true
        },
        {
          "describe": "Use the Database.Delete method if the Contact insertion fails.",
          "isRight": false
        },
        {
          "describe": "Use the Database.Insert method with allOrNone set to False.",
          "isRight": false
        },
        {
          "describe": "Disable Validation rules on Contacts and set default values witha Trigger.",
          "isRight": false
        }
      ],
      "hashCode": "2019145670",
      "analysis": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/langCon_apex_transaction_control.htm"
    },
    {
      "describe": "An org has an existing process, built using Process Builder, on Opportunity that sets a custom field, CommissionBaseAmount__c, when an Opportunity is edited and the Opportunity's Amount changes.\nA developer recently deployed an Opportunity before update trigger that uses the CommissionBaseAmount__c and complex logic to calculate a value for a custom field, CommissionAmount__c, when an Opportunity stage changes to Closed/Won.\nUsers report that when they change the Opportunity to Closed/Won and also change the Amount during the same save, the CommissionAmount__c is incorrect.\nWhich action should the developer take to correct this problem?",
      "answerOptions": [
        {
          "describe": "Call the trigger from the process.",
          "isRight": false
        },
        {
          "describe": "Replace the process with a Fast Field Update record-trigger flow.",
          "isRight": true
        },
        {
          "describe": "Call the process from the trigger.",
          "isRight": false
        }
      ],
      "hashCode": "2019146636",
      "analysis": ""
    },
    {
      "describe": "Which statement is considered a best practice for writing bulk safe Apex Triggers?",
      "answerOptions": [
        {
          "describe": "Add records to collections and perform DML operations against these collections.",
          "isRight": true
        },
        {
          "describe": "Perform all DML operations from within a Future Method.",
          "isRight": false
        },
        {
          "describe": "Instead of DML statements, use the Database methods with allOrNone set to False.",
          "isRight": false
        },
        {
          "describe": "Add LIMIT 50000 to every SOQL statement.",
          "isRight": false
        }
      ],
      "hashCode": "2019146386",
      "analysis": ""
    },
    {
      "describe": "Salesforce users consistently receive a \"Maximum trigger depth exceeded\" error when saving an Account.\nHow can a developer fix this error?",
      "answerOptions": [
        {
          "describe": "Split the trigger logic into two separate triggers.",
          "isRight": false
        },
        {
          "describe": "Use a helper class to set a Boolean to TRUE the first time a trigger Is fired, and then modify the trigger to only fire when the Boolean is FALSE.",
          "isRight": true
        },
        {
          "describe": "Convert the trigger to use the @future annotation, and chain any subsequent trigger invocations to the Account object.",
          "isRight": false
        },
        {
          "describe": "Modify the trigger to use the isMultiThread=true annotation.",
          "isRight": false
        }
      ],
      "hashCode": "2019146599",
      "analysis": ""
    },
    {
      "describe": "A corporation has many different Salesforce orgs, with some different objects and some common objects, and wants to build a single Java application that can create, retrieve, and update common object records in all of the different orgs.\n\nWhich method of integration should the application use?",
      "answerOptions": [
        {
          "describe": "Metadata API",
          "isRight": false
        },
        {
          "describe": "Apex REST Web Service",
          "isRight": false
        },
        {
          "describe": "SOAP API with the Partner WSDL",
          "isRight": true
        },
        {
          "describe": "SOAP API with the Enterprise WSDL",
          "isRight": false
        }
      ],
      "hashCode": "2019145610",
      "analysis": ""
    },
    {
      "describe": "A developer needs to send Account records to an external system for backup purposes. The process must take a snapshot of Accounts as they\nare saved and then make a callout to a RESTful web service. The web service can only receive, at most, one record per call.\n\nWhich feature should be used to implememt these requirements?",
      "answerOptions": [
        {
          "describe": "Queueable",
          "isRight": false
        },
        {
          "describe": "Workflow",
          "isRight": false
        },
        {
          "describe": "@future",
          "isRight": false
        },
        {
          "describe": "Process Builder",
          "isRight": true
        }
      ],
      "hashCode": "2019145674",
      "analysis": ""
    },
    {
      "describe": "Which use case can be performed only by using asynchronous Apex?",
      "answerOptions": [
        {
          "describe": "Updating a record after the completion of an insert",
          "isRight": false
        },
        {
          "describe": "Querying tens of thousands of records",
          "isRight": false
        },
        {
          "describe": "Calling a web service from an Apex trigger",
          "isRight": true
        },
        {
          "describe": "Making a call to schedule a batch process to complete in the future",
          "isRight": false
        }
      ],
      "hashCode": "2019146635",
      "analysis": ""
    },
    {
      "describe": "A company uses a custom-built enterprise resource planning (ERP) system to handle order management. The company wants Sales Reps to \nknow the status of orders so that if a customer calls to ask about their shipment, the Sales Rep can advise the customer about the order's \nstatus and tracking number if it is already shipped.\n\nWhich two methods can make this ERP order data visible in Salesforce? Choose 2 answers",
      "answerOptions": [
        {
          "describe": "Use Salesforce Connect to view real-time Order data in the ERP system.",
          "isRight": true
        },
        {
          "describe": "Write a cron job in Salesforce to poll the ERP system for order updates.",
          "isRight": false
        },
        {
          "describe": "Have the ERP system push the data into Salesforce using the SOAP API.",
          "isRight": true
        },
        {
          "describe": "Ensure real-time order data is in Salesforce using the Streaming API.",
          "isRight": false
        }
      ],
      "hashCode": "2019146421",
      "analysis": ""
    },
    {
      "describe": "An org has a process Builder process on Opportunity that sets a custom field,commnissionBaseAccount_c, when an Opportunity is edited and the Opportunity's Amount changes.\nA developer recently deployed an Opportunity before update trigger that uses the commnissionBaseAccount_c and complex logic to calculate a value for a custom field,commnissionBaseAccount_c when an Opportunity stage changes to Closed/Won.\nUsers report that when they change the Opportunity to Closed/Won and also change the Amount during the same save,the commnissionBaseAccount_c is incorrect.\nWhich two actions should the developer take to correct this problem?\nChoose 2 answers",
      "answerOptions": [
        {
          "describe": "Call the trigger from the process.",
          "isRight": true
        },
        {
          "describe": "Uncheck the recursion checkbox on the process.",
          "isRight": false
        },
        {
          "describe": "Use a static Boolean variable in the trigger.",
          "isRight": true
        },
        {
          "describe": "Call the process from the trigger.",
          "isRight": false
        }
      ],
      "hashCode": "2019146538",
      "analysis": ""
    },
    {
      "describe": "<p>Refer to the code below:</p><p><br/></p><p>List&lt;opportunity&gt; opportunities = [ELECT Id, Amount from opportunity ];</p><p>tor (opportunity opp: opportunities) {</p><p>// perform operation here</p><p>}</p><p><br/></p><p>When the code runs, it results in a System Limit Exception with the error message: Apex heap size too large.</p><p>What should be done to fox this error?</p><p><br/></p>",
      "answerOptions": [
        {
          "describe": "<p>Use a SOQL for loop to process the data.</p>",
          "isRight": true
        },
        {
          "describe": "<p>Convert the List into a set.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Use Limits.getLimitHeapSize().</p>",
          "isRight": false
        },
        {
          "describe": "<p>Use a try/catch block to catch the error.</p>",
          "isRight": false
        }
      ],
      "hashCode": "2019145488",
      "analysis": ""
    },
    {
      "describe": "<p>A developer created a Lightning web component for the Account record page that displays the five recently contacted Contacts for an Account. The Apex method, getRecentContacts, returns a list of Contacts and will be wired to a property in the component.</p><p><br/></p><p>01:</p><p>02:&nbsp; &nbsp; public class ContactFetcher&nbsp; {</p><p>03:</p><p>04:&nbsp; &nbsp; &nbsp; &nbsp; static List&lt;Contact&gt; getRecentContacts(Id accountId) {</p><p>05:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;Contact&gt; contacts = getFiveMostRecent(accountId) ;</p><p>06:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return contacts;</p><p>07:&nbsp; &nbsp; &nbsp; &nbsp; }</p><p>08:</p><p>09:&nbsp; &nbsp; &nbsp; &nbsp; private static List&lt;Contact&gt; getFiveMostRecent(Id accountId) {</p><p>10:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // ...impletation...</p><p>11:&nbsp; &nbsp; &nbsp; &nbsp;}</p><p>12:&nbsp; &nbsp; }</p><p><br/></p><p>Which two lines must change in the above code to make the Apex method able to be wired? Choose 2 answers</p><p><br/></p>",
      "answerOptions": [
        {
          "describe": "<p>Add public to line 04.</p>",
          "isRight": true
        },
        {
          "describe": "<p>Add @AuraEnabled(cacheable=true) to line 03.</p>",
          "isRight": true
        },
        {
          "describe": "<p>Remove private from line 09.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Add @AuraEnabled(cacheable=true) to line 08.</p>",
          "isRight": false
        }
      ],
      "hashCode": "2019145547",
      "analysis": ""
    },
    {
      "describe": "A developer created a Lightning web component that uses a lightning-record-edit-form to collect information about Leads. Users complain that they only see one error message at a time when they save a Lead record.\n\n Which best practice should the developer use to perform the validations, and allow more than one error message to be displayed simultaneously?",
      "answerOptions": [
        {
          "describe": "Try/catch/finally block",
          "isRight": false
        },
        {
          "describe": "Apex trigger",
          "isRight": false
        },
        {
          "describe": "Validation rules",
          "isRight": false
        },
        {
          "describe": "External JavaScript library",
          "isRight": true
        }
      ],
      "hashCode": "2019147316",
      "analysis": ""
    },
    {
      "describe": "A developer is working on a set of custom Aura components that can be individually added to a home page. One of the components, c:searchAccounts, allows users to search for an Account and then select a specific found Account. Once selected, the other components should get other information related to the selected Account and display it.\nWhich event should the c:searchAccounts component fire to make it known that an Account is selected?",
      "answerOptions": [
        {
          "describe": "An application event",
          "isRight": false
        },
        {
          "describe": "A refreshView event",
          "isRight": false
        },
        {
          "describe": "A publish event",
          "isRight": false
        },
        {
          "describe": "A component event",
          "isRight": true
        }
      ],
      "hashCode": "2019147314",
      "analysis": ""
    },
    {
      "describe": "A lead developer for a Salesforce organization needs to develop a page-centric application that allows the user to interact with multiple objects related to a Contact. The application needs to implement a third-party JavaScript framework such as Angular, and must be made available in both Classic and Lightning Experience.\nGiven these requirements, what is the recommended solution to develop the application?",
      "answerOptions": [
        {
          "describe": "Aura Components",
          "isRight": true
        },
        {
          "describe": "Lightning Web Components",
          "isRight": false
        },
        {
          "describe": "Visualforce",
          "isRight": false
        },
        {
          "describe": "Lightning Experience Builder",
          "isRight": false
        }
      ],
      "hashCode": "2019146383",
      "analysis": ""
    },
    {
      "describe": "The head of recruiting at UC wants to provide all internal users the ability to search for open positions by role, department, and location via a new recruiting app. In addition to search, users of the app should be able to refer a friend, apply for a position, and review the status of their crrert submissions. The app should be made available in Salesforce Mobile, but offline access is not required.\n\nGiven these requirements, what is the recommended approach to develop the app?",
      "answerOptions": [
        {
          "describe": "Lightning Experience Builder",
          "isRight": false
        },
        {
          "describe": "Lightning Web Components",
          "isRight": true
        },
        {
          "describe": "Visualforce",
          "isRight": false
        },
        {
          "describe": "Salesforce SDK",
          "isRight": false
        }
      ],
      "hashCode": "2019145578",
      "analysis": ""
    },
    {
      "describe": "A developer created a Lightning web component that uses a lightning-record-edit-form to collect information about Leads. Users complain that they only see one error message at a time when they save a Lead record.\n\n Which best practice should the developer use to perform the validations, and allow more than one error message to be displayed simultaneously?",
      "answerOptions": [
        {
          "describe": "Process Builder",
          "isRight": false
        },
        {
          "describe": "Custom validation rules",
          "isRight": false
        },
        {
          "describe": "Client-side validation",
          "isRight": true
        },
        {
          "describe": "Apex REST",
          "isRight": false
        }
      ],
      "hashCode": "2019146351",
      "analysis": ""
    },
    {
      "describe": "A developer is tasked with creating an application-centric feature on which end-users can access and update information. This feature must be available in Lightning Experience while working seamlessly in multiple device form factors, such as desktops, phones, and tablets. Additionally, the feature must support Addressable URL Tabsand interact with the Salesforce Console APIs.\nWhat are two approaches a developer can take to build the application and support the business requirements?\nChoose 2 answers",
      "answerOptions": [
        {
          "describe": "Create the application using Aura Components.",
          "isRight": true
        },
        {
          "describe": "Create the application using Lightning web Components wrapped in Aura Components.",
          "isRight": true
        },
        {
          "describe": "Create the application using Lightning Experience Builder.",
          "isRight": false
        },
        {
          "describe": "Create the application using Aura Components wrapped in Lightning web Components.",
          "isRight": false
        }
      ],
      "hashCode": "2019146545",
      "analysis": ""
    },
    {
      "describe": "<p>Consider the Apex class below that defines a RemoteAction used on a Visualforce search page.</p><p>Global with sharing class MyRemoter {</p><p>&nbsp; &nbsp; public String accountName {get; set;}</p><p>&nbsp; &nbsp; public static Account account {get; set;}</p><p>&nbsp; &nbsp; public MyRemoter() {}</p><p>&nbsp; &nbsp;&nbsp;</p><p>&nbsp; &nbsp; @RemoteAction</p><p>&nbsp; &nbsp; global static Account getAccount(String accountName) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; account = [SELECT Id, Name, NumberOfEmployees FROM Account WHERE Name = :accountName];</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return account;</p><p>&nbsp; &nbsp; }</p><p>}</p><p>Which code snippet will assert that the remote action returned the correct Account?</p><p><br/></p>",
      "answerOptions": [
        {
          "describe": "<p>Account a = MyRemoter.getAccount(&#39;TestAccount&#39;);</p><p>System.assertEquals( &#39;TestAccount&#39;, a.Name);</p><p><br/></p>",
          "isRight": true
        },
        {
          "describe": "<p>Account A = controller.getAccount(&#39;TestAccount&#39;);</p><p>System.assertEquals(&#39;TestAccount&#39;, a.Name);</p><p><br/></p>",
          "isRight": false
        },
        {
          "describe": "<p>MyRemoter remote = new MyRemoter();</p><p>Account a = remote.getAccount(&#39;TestAccount&#39;);</p><p>System.assertEquals(&#39;TestAccount&#39;, a.Name);</p><p><br/></p>",
          "isRight": false
        },
        {
          "describe": "<p>MyRemoter remote = new MyRemoter(&#39;TestAccount&#39;);</p><p>Account a = remote.getAccount();</p><p><br/></p>",
          "isRight": false
        }
      ],
      "hashCode": "2019145550",
      "analysis": ""
    },
    {
      "describe": "<p>A developer creates a Lightning web component to allow a Contact to be quickly entered. However, error messages are not displayed.</p><p>&lt;template&gt;</p><p>&lt;lightning-record-edit-form</p><p>object-api-name=&quot;Contact&quot;&gt;</p><p>&lt;lightning-Input-field field-name=&quot;FirstName&quot;&gt;&lt;/lightning-input-field&gt;</p><p>&lt;lightning-input-field field-name=&quot;LastName&quot;&gt;&lt;/lightning-input-field&gt;</p><p>&lt;lightning-input-field field-name=&quot;Email&quot;&gt;&lt;/lightning-input-field&gt;</p><p>&lt;lightning-button type=&quot;submit&quot;</p><p>name=&quot;submit&quot;</p><p>label=&quot;Create Contact&quot;&gt;</p><p>&lt;/lightning-button&gt;</p><p>&lt;/lightning-record-edit-form)</p><p>&lt;/template&gt;</p><p><br/></p><p>Which component should the developer add to the form to display error messages?</p><p><br/></p>",
      "answerOptions": [
        {
          "describe": "<p>apex:messages</p>",
          "isRight": false
        },
        {
          "describe": "aura:messages",
          "isRight": false
        },
        {
          "describe": "<p>Lightning-messages</p>",
          "isRight": true
        },
        {
          "describe": "<p>lightning-error</p>",
          "isRight": false
        }
      ],
      "hashCode": "2019145456",
      "analysis": ""
    },
    {
      "describe": "<p>A Visualforce page contains an industry select list and displays a table of Accounts that have a matching value in their Industry field.</p><p><br/></p><p>&lt;apex:selectList value=&quot; {!selectedIndustry}&quot;&gt;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &lt;apex:selectOptions values=&quot;{!industries}&quot;/&gt;</p><p>&lt;/apex:selectList&gt;</p><p><br/></p><p>When a user changes the value in the industry select list, the table of Accounts should be automatically updated to show the Accounts associated with the selected industry.</p><p><br/></p><p>What is the optimal way to implement this?</p><p><br/></p>",
      "answerOptions": [
        {
          "describe": "<p>Add an &lt;apex:actionSupport&gt; within the &lt;apex:selectList&gt;.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Add an &lt;apex:actionSupport&gt; within the &lt;apex:selectOptions&gt;.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Add an &lt;apex:actionFunction&gt; within the &lt;apex:selectList&gt;.</p>",
          "isRight": true
        },
        {
          "describe": "<p>Add an &lt;apex:actionFunction&gt; within the &lt;apex:selectOptions&gt;.</p>",
          "isRight": false
        }
      ],
      "hashCode": "2019145426",
      "analysis": ""
    },
    {
      "describe": "<p>Consider the following code snippet:</p><p><br/></p><p>&lt;apex:page docType=&quot;html-5.0&quot; controller=&quot;FindOpportunities”&gt;</p><p>&lt;apex:form &gt;</p><p>&lt;apex:pageBlock &gt;</p><p>&lt;apex:pageBlockSection title=&quot;find opportunity&quot;&gt;</p><p>&lt;apex:input label=&quot;opportunity name”/&gt;</p><p>&lt;apex:commandButton value=&quot;search&quot; action={ !search}&quot;/&gt;</p><p>&lt;apex:pageBlockSection&gt;</p><p>&lt;apex:pageBlockSection title=&quot;Opportunity List&quot; id=&quot;OpportunityList&quot;&gt;</p><p>&lt;!--DATA Table --&gt;</p><p>&lt;apex:pageBlockSection&gt;</p><p>&lt;apex:pageBlock &gt;</p><p>&lt;/apex:form&gt;</p><p>&lt;/apex:page&gt;</p><p><br/></p><p>Users of this Visualforce page complain that the page does a full refresh every time the Search button is pressed.</p><p>What should the developer do to ensure that a partial refresh is made so that only the section identified with opportunityList is re-drawn on the screen?</p><p><br/></p>",
      "answerOptions": [
        {
          "describe": "<p>Ensure the action method search returns null.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Implement the reRender attribute on the &lt;apex:commandButton&gt; tag.</p>",
          "isRight": true
        },
        {
          "describe": "<p>Enclose the DATA table within the &lt;apex:actionRegicn&gt; tag.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Implement the &lt;apex:actionFunction&gt; tag with immediate= true.</p>",
          "isRight": false
        }
      ],
      "hashCode": "2019145458",
      "analysis": ""
    },
    {
      "describe": "<p>A developer created a Lightning web component that allows users to input a text value that is used to search for Accounts by calling&nbsp; an Apex method.The Apex method returns a list of Accountwrappers and is called imperatively from a Javascript event handler.</p><p><br/></p><p>public class AccountSearcher{</p><p>public static List&lt;Accountwrapper&gt; search (String term){</p><p>List&lt;Accountwrapper&gt; wrappers = getMatchingaccountWrappers(term);</p><p>return wrappers;</p><p>&nbsp; &nbsp; }</p><p><br/></p><p>public class Accountwrapper {</p><p>public account(get; set;)</p><p>public Decimal matchProbability(get;set;)</p><p>}</p><p>// ...other methods,including getMatchingAccountWrappers implementation...</p><p>}&nbsp;</p><p><br/></p><p>Which two changes should the developer make so the Apex method functions correctly?</p><p>Choose 2 answers</p><p><br/></p>",
      "answerOptions": [
        {
          "describe": "<p>Add @AuraEnabled to line 09.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Add @AuraEnabled to line 03.</p>",
          "isRight": true
        },
        {
          "describe": "<p>Add @AuraEnabled to lines 11 and l2.</p>",
          "isRight": true
        },
        {
          "describe": "<p>Add @AaraEnabled to line 01.</p>",
          "isRight": false
        }
      ],
      "hashCode": "2019145457",
      "analysis": ""
    },
    {
      "describe": "<p>Which three actions must be completed in a Lightning web component for a JavaScript file in a static resource to be loaded? Choose 3 answers</p>",
      "answerOptions": [
        {
          "describe": "<p>Import the static resource.</p>",
          "isRight": true
        },
        {
          "describe": "<p>Reference the Static resource in a &lt;script&gt; tag.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Use the getSobjectType() method in an Apex class.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Import a method from the platformResourceLoader.</p>",
          "isRight": true
        },
        {
          "describe": "<p>Call loadScript.</p>",
          "isRight": true
        }
      ],
      "hashCode": "2019145422",
      "analysis": "<p>https://developer.salesforce.com/docs/component-library/documentation/en/lwc/lwc.js_third_party_library</p>"
    },
    {
      "describe": "A developer has a Visualforce page that automatically assigns ownership of an Account to a queue upon save.The page appears to correctly assign ownership, but an assertion validating the correct ownership fails.\nWhat can cause this problem?",
      "answerOptions": [
        {
          "describe": "The test class does not retrieve the updated value from the database.",
          "isRight": true
        },
        {
          "describe": "The test class does not use the seeAllData=true annotation.",
          "isRight": false
        },
        {
          "describe": "The test class does not use the Bulk API for loading test data.",
          "isRight": false
        },
        {
          "describe": "The test class does not implement the Queueable interface.",
          "isRight": false
        }
      ],
      "hashCode": "2019146515",
      "analysis": ""
    },
    {
      "describe": "A developer wrote a trigger on Opportunity that will update a custom Last Sold Date field on the Opportunity's Account whenever an \nOpportunity is closed. In the test class for the trigger, the assertion to validate the Last Sold Date field fails.\n\nWhat might be causing the failed assertion?",
      "answerOptions": [
        {
          "describe": "The test dass has not defined an Account owner when inserting the test data.",
          "isRight": false
        },
        {
          "describe": "The test class has not re-queried the Account record after updating the Opportunity.",
          "isRight": true
        },
        {
          "describe": "The test class has not implemented seeAllData=true in the test method.",
          "isRight": false
        },
        {
          "describe": "The test class is not using System.runAs() to run tests as a Salesforce administrator.",
          "isRight": false
        }
      ],
      "hashCode": "2019146451",
      "analysis": ""
    },
    {
      "describe": "A developer is debugging an Apex-based order creation process that has a requirement to have three savepoints, SP1, SP2, and SP3 (created in order, before the final execution of the process.\nDuring the final execution process, the developer has a routine to roll back to SP1 for a given condition. Once the condition is fixed, the code then calls a roll back to SP3 to continue with final execution. However, when the roll back to SP3 is called, a runtime error occurs.\nWhy does the developer receive a runtime error?",
      "answerOptions": [
        {
          "describe": "The developer used too many savepoints in one trigger session.",
          "isRight": false
        },
        {
          "describe": "The developer has too many DML statements between the savepoints.",
          "isRight": false
        },
        {
          "describe": "SP3 became invalid when SP1 was rolled back.",
          "isRight": true
        },
        {
          "describe": "The developer should have called SP2 before calling SP3.",
          "isRight": false
        }
      ],
      "hashCode": "2019146483",
      "analysis": ""
    },
    {
      "describe": "A developer is writing a lest test for a Lightning web component that conditionally displays child components based on a user's checkbox selections.\nWhat should the developer do to properly test that the correct components display and hide for each scenario?",
      "answerOptions": [
        {
          "describe": "Reset the DOM after each test with the afterEach{} method.",
          "isRight": false
        },
        {
          "describe": "Add a teardown block to reset the DOM after each test.",
          "isRight": false
        },
        {
          "describe": "Create a new describe block for each test.",
          "isRight": true
        },
        {
          "describe": "Create a new ladom instance for each test.",
          "isRight": false
        }
      ],
      "hashCode": "2019146477",
      "analysis": ""
    },
    {
      "describe": "A company notices that their unit tests in a test class with many methods to create many records for prerequisite reference data are slow. \nWhat can a developer to do address the issue?",
      "answerOptions": [
        {
          "describe": "Move the prerequisite reference data setup to a TestDataFactory and call that from each test method.",
          "isRight": false
        },
        {
          "describe": "Move the prerequisite reference data setup to a @testSetup method in the test class.",
          "isRight": true
        },
        {
          "describe": "Move the prerequisite reference data setup to a static method in the test class and call that from each test method.",
          "isRight": false
        },
        {
          "describe": "Move the prerequisite reference data setup to the constructor for the test class.",
          "isRight": false
        }
      ],
      "hashCode": "2019145612",
      "analysis": ""
    },
    {
      "describe": "How should a developer assert that a trigger with an asynchronous process has successfully run?",
      "answerOptions": [
        {
          "describe": "Create all test data, use @future in the test class, then perform assertions.",
          "isRight": false
        },
        {
          "describe": "Create all test data in the test class, invoke Test.startTest() and Test.stopTest() and then perform assertions,",
          "isRight": true
        },
        {
          "describe": "Insert records Into Salesforce, use seeAllData=true, then perform assertions.",
          "isRight": false
        },
        {
          "describe": "Create all test data in the test class, use system.runAs() to invoke the trigger, then perform assertions.",
          "isRight": false
        }
      ],
      "hashCode": "2019146633",
      "analysis": ""
    },
    {
      "describe": "An end user reports that a Lightning component is performing poorly.\nWhich two steps should be taken in production to investigate? Choose 2 answers",
      "answerOptions": [
        {
          "describe": "Enable Debug Mode for Lightning components.",
          "isRight": false
        },
        {
          "describe": "Print console.log() statements to identify where actions are deplayed.",
          "isRight": true
        },
        {
          "describe": "Use the Salesforce Lightning Inspector Chrome extension.",
          "isRight": true
        },
        {
          "describe": "Add a trace flag to the user who reported the issue.",
          "isRight": false
        }
      ],
      "hashCode": "2019147344",
      "analysis": ""
    },
    {
      "describe": "A large company uses Salesforce across several departments. Each department has its own Salesforce Administrator. It was agreed that each \nAdministrator would have their own sandbox in which to test changes.\n\nRecently, users notice that fields that were recently added for one department suddenly disappear without warning. Also, Workflows that \nonce sent emails and created tasks no longer do so.\n\nWhich two statements are true regarding these issues and resolution?Choose 2 answers",
      "answerOptions": [
        {
          "describe": "The administrators are deploying their own Change Sets, thus deleting each other's fields from the objects in production.",
          "isRight": false
        },
        {
          "describe": "A sandbox should be created to use as a unified testing environment instead of deploying Change Sets directly to production.",
          "isRight": true
        },
        {
          "describe": "The administrators are deploying their own Change Sets over each other, thus replacing entire Page Layouts and Workflows in Production.",
          "isRight": true
        },
        {
          "describe": "Page Layouts should never be deployed via Change Sets, as this causes Workflows and Field-level Security to be reset and fields to disappear.",
          "isRight": false
        }
      ],
      "hashCode": "2019146420",
      "analysis": ""
    },
    {
      "describe": "<p>A developer created an Apex class that makes an outbound RESTful callout. The following class was created to send a fake response in Apex test methods.</p><p><br/></p><p>@isTest</p><p>public class TestHttpCalloutMock implements</p><p>HttpCalloutMock {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public HTTPResponse respond (HTTPRequest request) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpResponse response = new HttpResponse( ) ;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; response.setHeader (&#39;Content-Type &#39; ,</p><p>&#39;application/json&#39;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; response.setBody(&#39; {&quot;colors&quot;: [&quot;red&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;pink&quot;]}&#39;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; response.setStatusCode (200);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return response;</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p><p><br/></p><p>}</p><p><br/></p><p>Which method can be called to return this fake response in the test methods?</p><p><br/></p>",
      "answerOptions": [
        {
          "describe": "Test.setTestData",
          "isRight": false
        },
        {
          "describe": "<p>Test.setMock</p>",
          "isRight": true
        },
        {
          "describe": "<p>Test.createStub</p>",
          "isRight": false
        },
        {
          "describe": "<p>testSetup</p>",
          "isRight": false
        }
      ],
      "hashCode": "2019145429",
      "analysis": "<p>https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_restful_http_testing_httpcalloutmock.htm</p>"
    },
    {
      "describe": "<p>A developer wrote a class named AccounthistoryManager that relies on field history tracking. The class has a static method called getAccountHistory that takes in an Account as a parameter and returns a list of associated AccountHistory object records.</p><p>The following test fails:</p><p><br/></p><p>@isTest</p><p>public static void testAccountHistory() {&nbsp;</p><p>Account a= new Account (Name = &quot;test&quot;);</p><p>insert a;</p><p>a.name =&nbsp; a.name = *1</p><p>Update a;</p><p>List&lt;AccountHistory&gt; ahList = AccounthistoryManager. GetAccounthistory(a);</p><p>System.assert ( ahList.size() &gt; 0 )</p><p><br/></p><p>What should be done to make this test pass?</p><p><br/></p>",
      "answerOptions": [
        {
          "describe": "<p>Use Test.isRunningTest() in getAccountHistory() to conditionally return fake AccountHistory records.</p>",
          "isRight": true
        },
        {
          "describe": "<p>Use @isTest(SeeAllData=true) to see historical data from the org and query for AccountHistory records.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Create AccountHistory records manually in the test setup and write a query to get them.</p>",
          "isRight": false
        },
        {
          "describe": "<p>The test method should be deleted since this code cannot be tested.</p>",
          "isRight": false
        }
      ],
      "hashCode": "2019145485",
      "analysis": ""
    },
    {
      "describe": "<p>A developer created the following test method:</p><p><br/></p><p>@isTest (SeeAllData= true)</p><p>public static void testDeleteTrigger(){</p><p><br/></p><p>Account testAccount = new Account (name = &#39; Test1&#39;);</p><p>Insert testAccount;</p><p><br/></p><p>List&lt;Account&gt; testAccounts = [SELECT Id, Name from Account WHERE Name like &#39; Test &#39;];</p><p>System.assert (testAccounts.size() &gt; 0);&nbsp;</p><p><br/></p><p>delece testAccounts;</p><p>testAccounts = [SELECT Id, Name from Account WHERE Name like &#39; Test &#39;];</p><p>System.assert (testAccounts.size() == 0);</p><p>}</p><p><br/></p><p>The developer org has five accounts where the name starts with &quot;Test&quot;. The developer executes this test in the Developer Console.</p><p>After the test code runs, which statement is true?</p><p><br/></p>",
      "answerOptions": [
        {
          "describe": "<p>The test will fail.</p>",
          "isRight": false
        },
        {
          "describe": "<p>There will be no accounts where the name starts with &quot;Test&quot;.</p>",
          "isRight": false
        },
        {
          "describe": "<p>There will be five accounts where the name starts with &quot;Test&quot;.</p>",
          "isRight": true
        },
        {
          "describe": "<p>There will be six accounts where the name starts with &quot;Test&quot;.</p>",
          "isRight": false
        }
      ],
      "hashCode": "2019145486",
      "analysis": ""
    },
    {
      "describe": "<p>A developer created a class that implements the Queueable Interface, as follows：&nbsp;&nbsp;</p><p><br/></p><p>Public class without sharing OrderQueueableJob implements Queueable {</p><p>Public void execute (QueueableContext context) {</p><p>//implementation logic</p><p>System. enqueueJob {new FollowUpJob()};</p><p>}</p><p>}</p><p><br/></p><p>As part of the deployment process, the developer is asked to create a corresponding test class.</p><p>Which two actions should the developer take to successfully execute the test class?</p><p>Choose 2 answers</p><p><br/></p>",
      "answerOptions": [
        {
          "describe": "<p>Ensure the running user of the test class has, at least, the View All permission on the Order object.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Enclose System. enqueueJob (new OrderQueueableJob()} within Test.startTest and Test. stopTest().</p>",
          "isRight": true
        },
        {
          "describe": "<p>Implement seeAllData=true to ensure the Queueable job is able to run in bulk mode.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Implement Test.isRunningTest to prevent chaining jobs during test execution.</p>",
          "isRight": true
        }
      ],
      "hashCode": "2019145461",
      "analysis": ""
    },
    {
      "describe": "A company manages information about their product offerings in custom objects named Catalog and Catalog Item. Catalog Item has a master-detail field to Catalog, and each Catalog may have as many as 100,000 Catalog Items.\nBoth custom objects have a CurrencyIsoCode text field that contains the currency code they should use. If a Catalog's CurrencyIsoCode changes, all of its Catalog Items' CurrencyIsoCodes should be changes as well.\nWhat should a developer use to update the CurrencyIsoCodes on the Catalog Items when the Catalog's CurrencyIsoCode changes?",
      "answerOptions": [
        {
          "describe": "An after insert trigger on Catalog that updates the Catalog Items if the Catalog's CurrencyIsoCode is different",
          "isRight": false
        },
        {
          "describe": "A Database.Schedulable and Database.Batchable class that queries the Catalog object and updates the Catalog Items if the Catalog CurrencyIsoCode is different.",
          "isRight": false
        },
        {
          "describe": "An after insert trigger on Catalog Item that updates the Catalog Items if the Catalog's CurrencyIsoCode is different",
          "isRight": false
        },
        {
          "describe": "A Database.Schedulable and Database.Batchable class that queries the Catalog Item object and updates the Catalog Items if the Catalog CurrencyIsoCode is different.",
          "isRight": true
        }
      ],
      "hashCode": "2019146637",
      "analysis": ""
    },
    {
      "describe": "Universal Containers (UC) calculates commissions on their Opportunities in different ways based on complex rules that vary depending on the line of business of the Opportunity.\nWhenever a new line of business is added to Salesforce at UC, it is likely that a different calculation will need to be added too. When an Opportunity's stage is changed to Closed/Won, its commission should be calculated in real time.\nWhat should a developer use so that different implementations of the commission calculation can be invoked on the stage change?",
      "answerOptions": [
        {
          "describe": "A final class with multiple methods",
          "isRight": false
        },
        {
          "describe": "Apex Describe Schema methods",
          "isRight": false
        },
        {
          "describe": "An Apex class with a custom enum",
          "isRight": true
        },
        {
          "describe": "An Interface and implementing classes.",
          "isRight": false
        }
      ],
      "hashCode": "2019147321",
      "analysis": ""
    },
    {
      "describe": "A developer wishes to improve runtime performance of Apex calls by caching results on the client.\nWhat is the best way to implement this?",
      "answerOptions": [
        {
          "describe": "Decorate the server-side method with @AuraEnabled(storable=true).",
          "isRight": false
        },
        {
          "describe": "Decorate the server-side method with @AuraEnabled(cacheable=true).",
          "isRight": true
        },
        {
          "describe": "Call the setStorable( ) method on the action in the JavaScript client-side code.",
          "isRight": false
        },
        {
          "describe": "Set a cookie in the browser for use upon return to the page.",
          "isRight": false
        }
      ],
      "hashCode": "2019145641",
      "analysis": "https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/controllers_server_apex_auraenabled_annotation.htm"
    },
    {
      "describe": "There is an Apex controller and a Visualforce page in an org that displays records with a custom filter consisting of a combination of picklist values selected by the user.\nThe page takes too long to display results for some of the input combinations, while for other input choices it throws the exception, \"Maximum view state size limit exceeded\".\nWhat step should the developer take to resolve this issue?",
      "answerOptions": [
        {
          "describe": "Adjust any code that filters by picklist values since they are not indexed.",
          "isRight": false
        },
        {
          "describe": "Split the layout to filter records in one Visualforce page and display the list of records in a second page using the same Apex controller.",
          "isRight": false
        },
        {
          "describe": "Remove instances of the transient keyword from the Apex controller to avoid the view state error.",
          "isRight": false
        },
        {
          "describe": "Use a StandardSetController or SOQL LIMIT In the Apex controller to limit the number of records displayed at a time.",
          "isRight": true
        }
      ],
      "hashCode": "2019146631",
      "analysis": ""
    },
    {
      "describe": "As part of a custom development, a developer creates a Lightning Component to show how a particular opportunity progresses over time. The component must display the date stamp when any of the following fields change:\n\n• Amount, Probability, Stage, or Close Date\n\nWhat is the most efficient way to query such information?",
      "answerOptions": [
        {
          "describe": "[Select Amont, CloseDate, StageName, Probability FROM Opportunity__History WHERE OpportunityId = : oppId];",
          "isRight": false
        },
        {
          "describe": "[Select Amount, CloseDate, StageName, Probability FROM OpportunityHistory WHERE OpportunityId = : oppId] ;",
          "isRight": true
        },
        {
          "describe": "[Select NewWalue, OldValue FROM OpportunityField__History WHERE OpportunityId = : oppId AND Field IN ('StageName', 'Probability', 'Amount', 'CloseDate')];",
          "isRight": false
        },
        {
          "describe": "[Select NewWalue, OldValue FROM OpportunityField__History WHERE OpportunityId = : oppId AND Field IN ('StageName', 'Probability', 'Amount', 'CloseDate')];",
          "isRight": false
        }
      ],
      "hashCode": "2019146419",
      "analysis": "https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_objects_opportunityfieldhistory.htm"
    },
    {
      "describe": "A developer created an Opportunity trigger that updates the account rating when an associated opportunity is considered high value. Current criteria for an opportunity to be considered high value is an amount greater than or equal to $1,000,000. However, this criteria value can change over time.\nThere is a new requirement to also display high value opportunities In a Lightning web component.\nWhich two actions should the developer take to prevent the business logic that obtains the high value opportunities from being repeated In more than one place?\nChoose 2 answers",
      "answerOptions": [
        {
          "describe": "Use custom metadata to hold the high value amount.",
          "isRight": true
        },
        {
          "describe": "Call the trigger from the Lightning web component.",
          "isRight": false
        },
        {
          "describe": "Leave the business logic code inside the trigger for efficiency.",
          "isRight": false
        },
        {
          "describe": "Create a helper class that fetches the high value opportunities.",
          "isRight": true
        }
      ],
      "hashCode": "2019146607",
      "analysis": ""
    },
    {
      "describe": "A developer is creating a page in App Builder that will be used in the Salesforce mobile app.\nWhich two practices should the developer follow to ensure the page operates with optimal performance?\nChoose 2 answers",
      "answerOptions": [
        {
          "describe": "Limit five visible components on the page.",
          "isRight": false
        },
        {
          "describe": "Limit 25 fields on the record detail page.",
          "isRight": true
        },
        {
          "describe": "Limit the number of Tabs and Accordion components.",
          "isRight": false
        },
        {
          "describe": "Analyze the page with Performance Analysis for App Builder.",
          "isRight": true
        }
      ],
      "hashCode": "2019146632",
      "analysis": "https://help.salesforce.com/s/articleView?id=sf.lightning_page_performance.htm&type=5"
    },
    {
      "describe": "A business currently has a process to manually upload orders from its external Order Management System (OMS) into Salesforce.\nThis is a labor intensive process since accounts must be exported out of Salesforce to get the IDs. The upload file must be updated with the correct account IDs to relate the orders to the corresponding accounts.\nWhich two recommendations should make this process more efficient?\nChoose 2 answers",
      "answerOptions": [
        {
          "describe": "Ensure the data in the file is sorted by the order ID.",
          "isRight": false
        },
        {
          "describe": "Use the upsert wizard in the Data Loader to import the data.",
          "isRight": true
        },
        {
          "describe": "Identify unique fields on Order and Account and set them as External IDs.",
          "isRight": true
        },
        {
          "describe": "Use the insert wizard in the Data Loader to import the data.",
          "isRight": false
        }
      ],
      "hashCode": "2019146602",
      "analysis": ""
    },
    {
      "describe": "<p>Consider the following code snippet:</p><p><br/></p><p>public static List&lt;Account&gt; getAccounts (Date thisDate, Id goldenRT) {</p><p>List&lt;Account&gt; accountList = [select Id，Name, Industry FROM Account WHERE CreatedDate = :thisDate OR RecordTypeId = :goldenRT];&nbsp;</p><p>return accountList；</p><p>}</p><p><br/></p><p>The Apex method is executed in an environment with a large data volume count for Accounts, and the query Is performing poorly.</p><p>Which technique should the developer implement to ensure the query performs optimally, while preserving the entire result set?</p><p><br/></p>",
      "answerOptions": [
        {
          "describe": "<p>Annotate the method with the @Future annotation.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Create a formula field to combine the createdDate and RecordType value, then filter based on the formula.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Use the Database. queryLocator method to retrieve the accounts.</p>",
          "isRight": false
        },
        {
          "describe": "<p>Break down the query into two individual queries and join the two result sets.</p>",
          "isRight": true
        }
      ],
      "hashCode": "2019145521",
      "analysis": ""
    },
    {
      "describe": "<p>Given a list of Opportunity records named opportunityList, which code snippet is best for querying all Contacts of the Opportunity&#39;s Account?</p>",
      "answerOptions": [
        {
          "describe": "<p>List &lt;Contact&gt; contactList = new List &lt;Contact&gt;();</p><p>Set &lt;Id&gt; accountIds = new Set &lt;Id&gt; ();</p><p>for (opportunity o : opportunityList){</p><p>&nbsp; &nbsp; &nbsp; accountIds.add(o.AccountId);</p><p>}</p><p><br/></p><p>for(Account a : [SELECT Id, (SELECT Id FROM Contacts) FROM Account WHERE Id&nbsp; &nbsp;IN :accountIds]) {</p><p>&nbsp; &nbsp; &nbsp; contactList.addAll (a.Contacts) ;</p><p>}</p><p><br/></p>",
          "isRight": true
        },
        {
          "describe": "<p>List &lt;Contact&gt; contactList = new List &lt;Contact&gt;();</p><p>for ( Contact c : [SELECT Id FROM Contact WHERE AccountId IN : opportunityList.Accountld]){</p><p>&nbsp; &nbsp; &nbsp; contactList.add (c) ;</p><p>}</p><p><br/></p>",
          "isRight": false
        },
        {
          "describe": "<p>List&lt;Contact&gt; contactList = new List&lt;Contact&gt;();</p><p>for (opportunity o : opportunityList){</p><p>&nbsp; &nbsp; &nbsp; Account a = [SELECT Id, (SELECT Id FROM Contacts) FROM Account WHERE Id = : o.AccountId];</p><p>&nbsp; &nbsp; &nbsp; contactList.addAll (a.Contacts) ;</p><p>}</p><p><br/></p>",
          "isRight": false
        },
        {
          "describe": "<p>List&lt;Contact&gt; contactList = new List&lt;Contact&gt;();</p><p>Set&lt;Id&gt; accountIds = new Set&lt;Id&gt;() ;</p><p>for (Opportunity o : opportunityList){</p><p>&nbsp; &nbsp; &nbsp; contactIds.add (o.Contacts) ;</p><p>}</p><p><br/></p><p>for (Contact c : [SELECT Id FROM Contact WHERE Id IN :contactIds]){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; contactList.add (c) ;</p><p>}</p><p><br/></p>",
          "isRight": false
        }
      ],
      "hashCode": "2019145421",
      "analysis": ""
    },
    {
      "describe": "<p>The following code segment is called from a trigger handler class from the Opportunity trigger:</p><p><br/></p><p>for (opportunity opp: Trigger.new){</p><p>if (opp . amount &gt;= 1000000)</p><p>Account acct = [SELECT Id, status FROM Account WHERE id = ：opp .accountId LIMIT 1);</p><p>acct.status. = &#39;High Potential&#39;;</p><p>Update. Act；</p><p>}</p><p>}</p><p><br/></p><p>Which two changes should improve this code and make it more efficient?</p><p>Choose 2 answers</p><p><br/></p>",
      "answerOptions": [
        {
          "describe": "<p>The method must be annotated with the @InvocableMethod annotation.</p>",
          "isRight": true
        },
        {
          "describe": "<p>Move the SOQL to fetch the account record outside of the tor loop.</p>",
          "isRight": true
        },
        {
          "describe": "<p>System.LimitException: Too many SOQL Queries on Account</p>",
          "isRight": false
        },
        {
          "describe": "<p>Use Trigger.old instead of Trigger .new.</p>",
          "isRight": false
        }
      ],
      "hashCode": "2019145460",
      "analysis": ""
    }
  ],
  "hashCode": "-1290254627"
}